# Calculate the Froude number and mixing factor for the given flow
Fr = mod_hyd$Ui[i] / sqrt(9.81 * mod_hyd$di[i])
# Calculate mixing parameter (6a of Schweizer)
Smix = (exp(-4.72 - 2.84 * (log(Fr)))) / (1 + (exp(-4.72 - 2.84 * (log(Fr)))))
# relative depth distribution
depth.dist = ((1 - Smix) * nd + Smix * lnd)
# overwirte any negative values to zero
depth.dist = ifelse(depth.dist < 0, 0, depth.dist)
# absolute depths
abs.depths = mod_hyd$di[i] * bins
### Velocities ###
# calculate scale parameter for velocity
s = -0.150 - (0.252 * log(Fr))
# calculate velocity distributions (Saraeva and Hardy)
vel.dist = s*((3.33 * exp(-bins / 0.693)) +
(0.117 * exp( - ((bins - 8) / 1.73)^2))) +
((1 - s) * (0.653 * exp(- ((bins - 1) / 0.664)^2 )))
# overwirte any negative values to zero
vel.dist = ifelse(vel.dist < 0, 0, vel.dist)
# absolute velocities
abs.velocities = mod_hyd$Ui[i] * bins
######################################
# apply suitability curves to outputs
n.bins <- length(abs.depths)
# find the indexed depth/velocity suitability that nearest matches the
# simulated bins
sum.d.suit = 0
sum.v.suit = 0
for (j in 1 : n.bins){
# identify index of nearest suitability value
j.depth <- which.closest(d_curve$depth, abs.depths[j])
j.vel <- which.closest(v_curve$velocity, abs.velocities[j])
sum.d.suit = sum.d.suit + depth.dist[j]*d_curve$suit[j.depth]
sum.v.suit = sum.v.suit + vel.dist[j]*v_curve$suit[j.vel]
}
d.suit = sum.d.suit/sum(depth.dist)
v.suit = sum.v.suit/sum(vel.dist)
# calculate the composite suitability and output WUA using if-else
# statement to determine if substrate suitability is applied
WUA.out[i, 1] <- mod_hyd$Q[i]
WUA.out[i, 2] <- d.suit
WUA.out[i, 3] <- v.suit
WUA.out[i, 4] <- sub.suit
WUA.out[i, 5] <- mod_hyd$Wi[i]
WUA.out[i , 6] <- WUA.out[i, 2] * WUA.out[i, 3] * WUA.out[i, 4] * WUA.out[i, 5]
}
# name columns
colnames(WUA.out) = c("Q", "d.suit", "v.suit", "s.suit", "w", "WUA")
# output WUA curve and figure
if(wua_output == TRUE){
####################################################
# output WUA figure
# apply smoothing filter
plot_y = rollmean(WUA.out$WUA, k = 5, na.pad = TRUE)
jpeg("WUA_Q.jpeg", width = 7, height = 5, units = "in", res = 300)
par(mar = c(4.5, 4.5, 1, 1))
plot(WUA.out$Q, plot_y, type = "l", lwd = 2,
xlab = expression("Discharge ("*m^3*s^{-1}*")"),
ylab = expression("WUA ("*m^{2}*m^{-1}*")"),
xaxs = "i", yaxs = "i",
ylim = c(0, (1.1 * max(plot_y, na.rm = T))))
grid()
box()
dev.off()
} else {
}
return(WUA.out)
}
# set working directory
setwd("G:/Shared drives/Projects 2020/20037 - Habitat Conservation Trust Foundation/2003701 - Instream Flow Assessment Methodology/Reviews/Code/DM")
library(dplyr)
# load in necessary data
depth_suit = read.csv("depth_suit.csv")
vel_suit = read.csv("vel_suit.csv")
hyd_241  = AvgHydraulics(S = 0.0256, wb = 2.9, db = 0.27, db_max = 0.38, D84 = 168,
max_Q = 0.6)
View(hyd_241)
hyd_241  = AvgHydraulics(S = 0.0256, wb = 2.9, db = 0.27, db_max = 0.38, D84 = 168,
max_Q = 0.12)
hab = Habitat2(hydraulics = hyd_241, d_cure = depth_suit, v_curve = vel_suit)
hab = Habitat2(hydraulics = hyd_241, d_curve = depth_suit, v_curve = vel_suit)
View(hab)
hab2 =  = Habitat(hydraulics = hyd_241, d_curve = depth_suit, v_curve = vel_suit)
hab2 = Habitat2(hydraulics = hyd_241, d_curve = depth_suit, v_curve = vel_suit)
hab = Habitat(hydraulics = hyd_241, d_curve = depth_suit, v_curve = vel_suit)
hab2 = Habitat2(hydraulics = hyd_241, d_curve = depth_suit, v_curve = vel_suit)
hab = Habitat(hydraulics = hyd_241, d_curve = depth_suit, v_curve = vel_suit)
hyd  = AvgHydraulics(S = 0.0003, wb = 168, db = 3.5, db_max = 5.1, D84 = 95)
hab2 = Habitat2(hydraulics = hyd, d_curve = depth_suit, v_curve = vel_suit)
hab = Habitat(hydraulics = hyd, d_curve = depth_suit, v_curve = vel_suit)
# clear workspace
rm(list = ls())
library(dplyr)
# set working directory
setwd("Z:/Shared/Projects/Active/20037 - Habitat Conservation Trust Foundation/2003701 - Instream Flow Assessment Methodology/Analysis")
# set working directory
setwd("G:/Shared drives/Projects 2020/20037 - Habitat Conservation Trust Foundation/2003701 - Instream Flow Assessment Methodology/Analysis")
# define relevant functions
source("aashgs_functions/AASHGS.R")
inputs = read.csv("241_Creek/aashgs_input.csv")
wb = inputs$value[1]
db = inputs$value[2]
db_max = inputs$value[3]
D84 = inputs$value[4]
D50 = 39
S = inputs$value[5]
max_Q = 0.114
mad = 0.057
d_curve = read.csv("Suitability_Curves/depth_suit_ptolemy.csv") %>% filter( species == "salmonid" & life_stage == "general")
v_curve = read.csv("Suitability_Curves/velocity_suit_ptolemy.csv") %>% filter( species == "salmonid" & life_stage == "general")
# load libraries
library(birk)
library(dplyr)
###########################################
##### Define Find_U Function #####
findU = function(Wb, S, D84, depths) {
deltaX = 0.0001
Xgrid = Wb * seq(0, 1, deltaX)
wet.vert = depths[depths >= 0]
Wi = length(wet.vert) * deltaX * Wb
Ai = sum(wet.vert * deltaX * Wb)
di = Ai / Wi
Pi = sum((diff(wet.vert)^2 + (max(Xgrid) * deltaX) ^2) ^ (1/2))
Ri = Ai/Pi
# Ferguson's continuously varying power law
D.84 = D84 / 1000
g = 9.81
a1 = 6.5
a2 = 2.5
Res = a1 * a2 * (Ri / D.84) /
(a1^2 + a2^2 * (Ri / D.84) ^ (5/3)) ^ (1/2)
Ui = Res * sqrt(g * Ri * S) # Velocity (m/s)
# Formatting the outputs in a dataframe
df = data.frame(Ai, Wi, di, Ui)
return(df)
}
# define grid
deltaX = 0.0001 # Resolution of grid upon which to calculate Q
# (as a proportion of wb)
deltaY = 0.001  # increment by which to change depths when estimating HG
# Ferguson model's shape factor b
if (is.na(db_max) == TRUE){
b = (wb / db) / 100
} else {
b = 1 - (db / db_max) # preferred method
}
# specify max b-value
b = ifelse(b > 0.98, 0.98, b)
# Generate the cross section
dmax = (1 + b) / (1 - b) * db
X = c(0, b * wb, 0.99 * wb, wb)
Y = 5 * db- c(0, db, dmax, 0)
# Interpolate the distribution onto an XS raster
Xgrid = wb * seq(0, 1, deltaX)
Ygrid = matrix(unlist(approx(X, Y, Xgrid)), ncol = 10001, byrow = TRUE)[2,]
# Specify the values of the water surface elevation for which to calculate Wi
Zw = 5 * db - dmax + seq(0.02 * dmax, dmax, deltaY * dmax)
######################################################
# For loop to calculate the width and discharge for each chosen water level
simulated = data.frame()
results = list()
for (j in 1:length(Zw)) {
#j = 3
depths = Zw[j] - Ygrid # Calculate the depths, for each vertical
results = findU(wb, S, D84, depths)
results = c(Q = results[1, 4] * results[1, 1], results)
simulated = rbind(simulated, results)
}
write.csv(simulated, "mean_hydraulics.csv", row.names = FALSE)
#####################################################
# Prepare graph of cross section
# select y-values based on db_max input
db_max = dmax
if(is.na(db_max) == TRUE){
plot_y = c(0, (db * -1), (db / b * - 1), 0)
} else {
plot_y = c(0, (db * -1), (db_max * - 1), 0)
}
# set up x-values to plot
plot_x = c(0, (b * wb), (0.99 * wb), wb )
channel = data.frame(x = plot_x, y = plot_y)
write.csv(channel, "channel.csv", row.names = FALSE)
# output a plot of the cross section
pdf("cross_section.pdf", width = 6, height = 4)
par(mar = c(4.5, 4.5, 1, 1))
plot(plot_x, plot_y, type = "l",
xlab = "Width (m)",
ylab = "Depth (m)",
ylim = c((min(plot_y) * 1.2), 0)
)
abline(a = (db * -1), 0, lty = 2, col = "grey")
legend("bottomleft", col = c("black", "grey"), bty = "n",
lty = c(1, 2), legend = c("Channel cross section",
"Average depth"))
dev.off()
# set up as per original code put together by McParland et al. (2016)
bins = seq(0, 6, 0.05) # bins that will be used for depth and velocity distributions
und = 1 # mean of normal depth distribution
sdnd = 0.52 # standard deviation of normal depth distribution
nd = dnorm(bins, und, sdnd) # normal depth density distribution
ulnd = 0 # mean of lognormal depth distribution
sdlnd = 1.09 # standard deviation of lognormal depth distribution
lnd = dlnorm(bins, ulnd, sdlnd) # lognormal depth density distribution
unv = 1 # mean of normal velocity distribution
sdnv = 0.52 # standard deviation of normal velocity distribution
nv = dnorm(bins, unv, sdnv) # normal velocity denisty distribution
ulnv = 0 # mean of lognormal velocity distribution
sdlnv = 1.19 # standard deviation of lognormal velocity distribution
lnv = dlnorm(bins, ulnv, sdlnv) # lognormal velocity density distribution
if(is.null(s_curve) | is.null(gsd)) {
sub.suit = 1
} else {
n.class = nrow(s_curve)
sub.out = data.frame()
for( i in 1 : n.class) {
#i = 1
class.obvs = length(which(gsd >= s_curve$lower[i] &
gsd < s_curve$upper[i]))
to.add = c(i, class.obvs, s_curve$suit[i])
sub.out = rbind(sub.out, to.add)
}
sub.suit = sum((sub.out[ , 2] * sub.out[ , 3])) /
sum(sub.out[ , 2])
}
s_curve = NULLK
s_curve = NULL
gsd = NULL
if(is.null(s_curve) | is.null(gsd)) {
sub.suit = 1
} else {
n.class = nrow(s_curve)
sub.out = data.frame()
for( i in 1 : n.class) {
#i = 1
class.obvs = length(which(gsd >= s_curve$lower[i] &
gsd < s_curve$upper[i]))
to.add = c(i, class.obvs, s_curve$suit[i])
sub.out = rbind(sub.out, to.add)
}
sub.suit = sum((sub.out[ , 2] * sub.out[ , 3])) /
sum(sub.out[ , 2])
}
simulated = simulated %>% filter(Q <= max_Q) %>%
mutate(MAD = (Q / mad * 100))
# generate objects for use in the loop
n.simulated = nrow(simulated)
dist_out = 200
WUA.out = data.frame()
for (i in 1:n.simulated){
#i = 139
#### Schweizer ####
# Calculate the Froude number and mixing factor for the given flow
Fr = simulated$Ui[i] / sqrt(9.81 * simulated$di[i])
# 6a
Smix = (exp(-4.72 - 2.84 * (log(Fr)))) / (1 + (exp(-4.72 - 2.84 * (log(Fr)))))
# 6b
# Smix = (exp(-2.75 - 2.38 * (log(Fr)) - 2.08 * ((simulated$Q[i] / mad)^0.5))) /
# (1 + (exp(-2.75 - 2.38 * (log(Fr)) - 2.08 * ((simulated$Q[i] / mad)^0.5))))
# 6c
#Z = 1/(D50/simulated$di[i])
#Smix = (exp(-2.34 - 2.27 * (log(Fr)) - 2.03 * ((simulated$Q[i] / mad)^0.5) - 0.04*Z)) /
#(1 + (exp(-2.75 - 2.38 * (log(Fr)) - 2.08 * ((simulated$Q[i] / mad)^0.5)) - 0.04*Z))
# relative depth distribution
depth.dist = ((1 - Smix) * nd + Smix * lnd)
# absolute depths
abs.depths = simulated$di[i] * bins
# relative velocity distribution
# vel.dist = ((1 - Smix) * nd + Smix * lnd)
##### Saraeva and Hardy #####
# depth
t = -0.7 * log(simulated$di[i])
x = abs.depths/simulated$di[i]
# depth.dist = (t * exp(-x)) +
#  ((1 - t) * (0.951 * exp(-((x - 1)/0.593)^2)))
# calculate scale parameter
s = -0.150 - (0.252 * log(Fr))
# calculate velocity distributions
vel.dist = s*((3.33 * exp(-bins / 0.693)) +
(0.117 * exp( - ((bins - 8) / 1.73)^2))) +
((1 - s) * (0.653 * exp(- ((bins - 1) / 0.664)^2 )))
# overwirte any negative values to zero
vel.dist = ifelse(vel.dist < 0, vel.dist - min(vel.dist), vel.dist)
depth.dist = ifelse(depth.dist < 0, depth.dist - min(depth.dist), depth.dist)
# absolute velocities
abs.velocities = simulated$Ui[i] * bins
######################################
d.bin.suits = data.frame()
v.bin.suits = data.frame()
n.bins = length(abs.depths)
# find the indexed depth/velocity suitability that nearest matches the
# simulated bins
for (j in 1 : n.bins){
#j = 31
j.depth = which.closest(d_curve$depth, abs.depths[j])
j.vel = which.closest(v_curve$velocity, abs.velocities[j])
# output suitability values into data frames
d.bin.suits[j, 1] = depth.dist[j]
d.bin.suits[j, 2] = abs.depths[j]
d.bin.suits[j, 3] = d_curve$suit[j.depth]
v.bin.suits[j, 1] = vel.dist[j]
v.bin.suits[j, 2] = abs.velocities[j]
v.bin.suits[j, 3] = v_curve$suit[j.vel]
}
colnames(d.bin.suits) = c("density", "depth", "suitability")
colnames(v.bin.suits) = c("density", "velocity", "suitability")
# aggregate the depth and velocity suitabilities for the simulated flow
d.suit = sum(d.bin.suits$density * d.bin.suits$suitability) /
sum(d.bin.suits$density)
v.suit = sum(v.bin.suits$density * v.bin.suits$suitability) /
sum(v.bin.suits$density)
# calculate the composite suitability and output WUA using if-else
# statement to determine if substrate suitability is applied
#if(sub_suit == "yes"){
WUA.out[i, 1] = simulated$Q[i]
WUA.out[i, 2] = d.suit
WUA.out[i, 3] = v.suit
WUA.out[i, 4] = sub.suit
WUA.out[i, 5] = simulated$Wi[i]
WUA.out[ , 6] = WUA.out[, 2] * WUA.out[, 3] * WUA.out[, 4] * WUA.out[, 5]
colnames(WUA.out) = c("Q", "d.suit", "v.suit", "s.suit", "w", "WUA")
# output distributions for select flows
if(is.null(dist_out) == FALSE){
if(i %in% dist_out){
d.bin.out = d.bin.suits[, 1:2]
v.bin.out = v.bin.suits[, 1:2]
MAD = round(simulated$MAD[i])
write.csv(d.bin.out, paste("d_dist", MAD, "%_MAD.csv", sep = ""), row.names = FALSE)
write.csv(v.bin.out, paste("v_dist", MAD, "%_MAD.csv", sep = ""), row.names = FALSE)
} else {
}
}
}
getwd()
######################################################
# For loop to calculate the width and discharge for each chosen water level
simulated = data.frame()
results = list()
for (j in 1:length(Zw)) {
#j = 3
depths = Zw[j] - Ygrid # Calculate the depths, for each vertical
results = findU(wb, S, D84, depths)
results = c(Q = results[1, 4] * results[1, 1], results)
simulated = rbind(simulated, results)
}
write.csv(simulated, "mean_hydraulics.csv", row.names = FALSE)
#####################################################
# Prepare graph of cross section
# select y-values based on db_max input
db_max = dmax
if(is.na(db_max) == TRUE){
plot_y = c(0, (db * -1), (db / b * - 1), 0)
} else {
plot_y = c(0, (db * -1), (db_max * - 1), 0)
}
# set up x-values to plot
plot_x = c(0, (b * wb), (0.99 * wb), wb )
channel = data.frame(x = plot_x, y = plot_y)
write.csv(channel, "channel.csv", row.names = FALSE)
# output a plot of the cross section
pdf("cross_section.pdf", width = 6, height = 4)
par(mar = c(4.5, 4.5, 1, 1))
plot(plot_x, plot_y, type = "l",
xlab = "Width (m)",
ylab = "Depth (m)",
ylim = c((min(plot_y) * 1.2), 0)
)
abline(a = (db * -1), 0, lty = 2, col = "grey")
legend("bottomleft", col = c("black", "grey"), bty = "n",
lty = c(1, 2), legend = c("Channel cross section",
"Average depth"))
dev.off()
# set up as per original code put together by McParland et al. (2016)
bins = seq(0, 6, 0.05) # bins that will be used for depth and velocity distributions
und = 1 # mean of normal depth distribution
sdnd = 0.52 # standard deviation of normal depth distribution
nd = dnorm(bins, und, sdnd) # normal depth density distribution
ulnd = 1 # mean of lognormal depth distribution
sdlnd = 1.09 # standard deviation of lognormal depth distribution
lnd = dlnorm(bins, ulnd, sdlnd) # lognormal depth density distribution
unv = 1 # mean of normal velocity distribution
sdnv = 0.52 # standard deviation of normal velocity distribution
nv = dnorm(bins, unv, sdnv) # normal velocity denisty distribution
ulnv = 1 # mean of lognormal velocity distribution
sdlnv = 1.19 # standard deviation of lognormal velocity distribution
lnv = dlnorm(bins, ulnv, sdlnv) # lognormal velocity density distribution
# Substrate suitability criteria
#########################################################
# if-else function to evaluate a reach-averaged substrate suitability
# value based on a grain-size distribution specified in the model.
# if no suitability curve or GSD are provided the substrate suitability
# defaults to 1.0
if(is.null(s_curve) | is.null(gsd)) {
sub.suit = 1
} else {
n.class = nrow(s_curve)
sub.out = data.frame()
for( i in 1 : n.class) {
#i = 1
class.obvs = length(which(gsd >= s_curve$lower[i] &
gsd < s_curve$upper[i]))
to.add = c(i, class.obvs, s_curve$suit[i])
sub.out = rbind(sub.out, to.add)
}
sub.suit = sum((sub.out[ , 2] * sub.out[ , 3])) /
sum(sub.out[ , 2])
}
########################################################
# convert depth, velocity, and substrate suitabilities into a WUA value
simulated = simulated %>% filter(Q <= max_Q) %>%
mutate(MAD = (Q / mad * 100))
# generate objects for use in the loop
n.simulated = nrow(simulated)
WUA.out = data.frame()
for (i in 1:n.simulated){
#i = 139
#### Schweizer ####
# Calculate the Froude number and mixing factor for the given flow
Fr = simulated$Ui[i] / sqrt(9.81 * simulated$di[i])
# 6a
Smix = (exp(-4.72 - 2.84 * (log(Fr)))) / (1 + (exp(-4.72 - 2.84 * (log(Fr)))))
# 6b
# Smix = (exp(-2.75 - 2.38 * (log(Fr)) - 2.08 * ((simulated$Q[i] / mad)^0.5))) /
# (1 + (exp(-2.75 - 2.38 * (log(Fr)) - 2.08 * ((simulated$Q[i] / mad)^0.5))))
# 6c
#Z = 1/(D50/simulated$di[i])
#Smix = (exp(-2.34 - 2.27 * (log(Fr)) - 2.03 * ((simulated$Q[i] / mad)^0.5) - 0.04*Z)) /
#(1 + (exp(-2.75 - 2.38 * (log(Fr)) - 2.08 * ((simulated$Q[i] / mad)^0.5)) - 0.04*Z))
# relative depth distribution
depth.dist = ((1 - Smix) * nd + Smix * lnd)
# absolute depths
abs.depths = simulated$di[i] * bins
# relative velocity distribution
# vel.dist = ((1 - Smix) * nd + Smix * lnd)
##### Saraeva and Hardy #####
# depth
t = -0.7 * log(simulated$di[i])
x = abs.depths/simulated$di[i]
# depth.dist = (t * exp(-x)) +
#  ((1 - t) * (0.951 * exp(-((x - 1)/0.593)^2)))
# calculate scale parameter
s = -0.150 - (0.252 * log(Fr))
# calculate velocity distributions
vel.dist = s*((3.33 * exp(-bins / 0.693)) +
(0.117 * exp( - ((bins - 8) / 1.73)^2))) +
((1 - s) * (0.653 * exp(- ((bins - 1) / 0.664)^2 )))
# overwirte any negative values to zero
vel.dist = ifelse(vel.dist < 0, vel.dist - min(vel.dist), vel.dist)
depth.dist = ifelse(depth.dist < 0, depth.dist - min(depth.dist), depth.dist)
# absolute velocities
abs.velocities = simulated$Ui[i] * bins
######################################
d.bin.suits = data.frame()
v.bin.suits = data.frame()
n.bins = length(abs.depths)
# find the indexed depth/velocity suitability that nearest matches the
# simulated bins
for (j in 1 : n.bins){
#j = 31
j.depth = which.closest(d_curve$depth, abs.depths[j])
j.vel = which.closest(v_curve$velocity, abs.velocities[j])
# output suitability values into data frames
d.bin.suits[j, 1] = depth.dist[j]
d.bin.suits[j, 2] = abs.depths[j]
d.bin.suits[j, 3] = d_curve$suit[j.depth]
v.bin.suits[j, 1] = vel.dist[j]
v.bin.suits[j, 2] = abs.velocities[j]
v.bin.suits[j, 3] = v_curve$suit[j.vel]
}
colnames(d.bin.suits) = c("density", "depth", "suitability")
colnames(v.bin.suits) = c("density", "velocity", "suitability")
# aggregate the depth and velocity suitabilities for the simulated flow
d.suit = sum(d.bin.suits$density * d.bin.suits$suitability) /
sum(d.bin.suits$density)
v.suit = sum(v.bin.suits$density * v.bin.suits$suitability) /
sum(v.bin.suits$density)
# calculate the composite suitability and output WUA using if-else
# statement to determine if substrate suitability is applied
#if(sub_suit == "yes"){
WUA.out[i, 1] = simulated$Q[i]
WUA.out[i, 2] = d.suit
WUA.out[i, 3] = v.suit
WUA.out[i, 4] = sub.suit
WUA.out[i, 5] = simulated$Wi[i]
WUA.out[ , 6] = WUA.out[, 2] * WUA.out[, 3] * WUA.out[, 4] * WUA.out[, 5]
colnames(WUA.out) = c("Q", "d.suit", "v.suit", "s.suit", "w", "WUA")
# output distributions for select flows
if(is.null(dist_out) == FALSE){
if(i %in% dist_out){
d.bin.out = d.bin.suits[, 1:2]
v.bin.out = v.bin.suits[, 1:2]
MAD = round(simulated$MAD[i])
write.csv(d.bin.out, paste("d_dist", MAD, "%_MAD.csv", sep = ""), row.names = FALSE)
write.csv(v.bin.out, paste("v_dist", MAD, "%_MAD.csv", sep = ""), row.names = FALSE)
} else {
}
}
}
simulated = simulated %>% filter(Q <= max_Q) %>%
mutate(MAD = (Q / mad * 100))
# generate objects for use in the loop
n.simulated = nrow(simulated)
WUA.out = data.frame()
i = 139
# Calculate the Froude number and mixing factor for the given flow
Fr = simulated$Ui[i] / sqrt(9.81 * simulated$di[i])
# 6a
Smix = (exp(-4.72 - 2.84 * (log(Fr)))) / (1 + (exp(-4.72 - 2.84 * (log(Fr)))))
# relative depth distribution
depth.dist = ((1 - Smix) * nd + Smix * lnd)
depth.dist
?dnorm
?dlnorm
